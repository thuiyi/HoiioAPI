/*
Copyright (C) 2011 Hoiio Pte Ltd (http://www.hoiio.com)

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/
package com.hoiio.util;

import java.net.URLDecoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.StringTokenizer;

import net.sf.json.JSONArray;
import net.sf.json.JSONException;
import net.sf.json.JSONObject;

/***
 * This class encapsulates the response that is generated by parsing the JSON response after a Hoiio API call.
 * @author Max
 */
public class APIResponse {

    public static String OUT_STATUS = "status";
    ResponseMap params;
    String responseStr;

    /***
     * Creates an API response that is generated after submitted as an API call.
     * @param responseStr
     */
    public APIResponse(String responseStr) {
        params = new ResponseMap();
        this.responseStr = responseStr;
        //System.out.println("Setting response " +responseStr);
        setResponse(responseStr);
    }

    /***
     * Gets the status in String format
     * @return The status in String format
     */
    public String getStatusString()
    {
        return getResponseMap().getString(OUT_STATUS);
    }

    /***
     * Gets the API Status of the response
     * @return
     */
    public APIStatus getStatus()
    {
        return APIStatus.get(getStatusString());
    }

    /***
     * Checks if the API call failed because of an invalid access token
     * @return true if access token is invalid, false otherwise
     */
    public boolean isInvalidAccessToken()
    {
        return getStatus() == APIStatus.error_invalid_access_token;
    }

    /***
     * Checks if the status returned by the API response is OK
     * @return true if response indicates a success
     */
    public boolean isOK() {
        if (getStatus() == null) {
            return false;
        } else {
            return getStatus() == APIStatus.success_ok;
        }
    }

    /***
     * Gets the JSON response from the API call
     * @return
     */
    public String getResponseString()
    {
        return responseStr;
    }

    /***
     * Gets response map containing the key-value pairs parsed from the JSON response
     * @return The response map containing the key-value pairs parsed from the JSON response
     */
    public ResponseMap getResponseMap()
    {
        return params;
    }

    /***
     * Parses the http response string into a map of name-value pairs.
     * @param inputString The input string to parse.
     */
    public void setResponse(final String inputString) {
        if (inputString == null || inputString.trim().equals("")) {
            return;
        }

        //Checks if it is a json request
        try {
            //System.out.println("Processing json string " + inputString);
            JSONObject output = JSONObject.fromObject(inputString);
            params.clear();
            processJSON(params, output);

        } catch (JSONException je) {
            //je.printStackTrace();

            //Possibly name value pair
            final StringTokenizer st = new StringTokenizer(inputString, "&;");

            while (st.hasMoreTokens()) {
                final String s = st.nextToken();
                final String[] nvp = s.split("=", 2);
                try {
                    params.put(nvp[0], URLDecoder.decode(String.valueOf(nvp[1]), "UTF-8"));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /***
     * Currently, this can only process simple JSON strings which does not include
     * Json arrays
     * @param container	The map to put the key-value pairs
     * @param obj The Json object that represents the response string
     */
    @SuppressWarnings("rawtypes")
    private void processJSON(ResponseMap container, JSONObject obj) {
        Iterator iter = obj.keys();
        while (iter.hasNext()) {
            String key = (String) iter.next();
            try {
                
                JSONArray arr = obj.getJSONArray(key);
                ResponseMap items[] = new ResponseMap[arr.size()];
                String items2[] = new String[arr.size()];
                boolean objMap = true;
                for (int i = 0; i < arr.size(); i++) {
                    if (arr.get(i) instanceof String) {
                        objMap = false;
                        items2[i] = arr.getString(i);
                    }
                    else {
                        items[i] = new ResponseMap();
                        JSONObject obj2 = arr.getJSONObject(i);
                        processJSON((ResponseMap)items[i], obj2);
                    }
                }
                if(objMap)
                    container.put(key, items);
                else
                    container.put(key, items2);
            } catch (JSONException e) {
                container.put(key, obj.getString(key));
            }
        }
    }

    /***
     * The response map containing the key-value pairs parsed from the JSON response
     */
    public static class ResponseMap extends HashMap<String, Object> {

        /**
         *
         */
        private static final long serialVersionUID = 4821741251242643924L;

        public String getString(String key) {
            return (String) super.get(key);
        }

        public double getDouble(String key) {
            return Double.parseDouble(getString(key));
        }

        public int getInt(String key) {
            return Integer.parseInt(getString(key));
        }

        public boolean getBool(String key) {
            return Boolean.parseBoolean(getString(key));
        }

        public ResponseMap[] getArray(String key) {
            return (ResponseMap[]) super.get(key);
        }

        public String[] getValues(String key) {

            if(!(super.get(key) instanceof String[]))
            {
                return new String[]{};
            }
            else
                return (String[]) super.get(key);
        }
    }
}

